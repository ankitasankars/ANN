{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.2"
    },
    "colab": {
      "name": "SONAR Data Classification Using Single ANN.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "jJBfp00NK5B-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Installing Theano\n",
        "# pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git\n",
        "\n",
        "# Installing Tensorflow\n",
        "# pip install tensorflow\n",
        "\n",
        "# Installing Keras\n",
        "# pip install --upgrade keras"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "azRPKPoBK5CC",
        "colab_type": "code",
        "outputId": "69544ca7-91d7-4f1a-b412-712b6f30276e",
        "colab": {}
      },
      "source": [
        "import keras\n",
        "import tensorflow"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Using TensorFlow backend.\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "r5ztzj1EK5CF",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# importing the libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q0ud3XhRK5CI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Loading the data\n",
        "dataset = pd.read_csv('sonar.csv', header = None)\n",
        "X = dataset.iloc[:, 0:60].values\n",
        "y = dataset.iloc[:, 60].values"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ej7OWGU6K5CK",
        "colab_type": "code",
        "outputId": "d2cb0a06-1c1a-430f-d2d0-70e89730e153",
        "colab": {}
      },
      "source": [
        "dataset.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>51</th>\n",
              "      <th>52</th>\n",
              "      <th>53</th>\n",
              "      <th>54</th>\n",
              "      <th>55</th>\n",
              "      <th>56</th>\n",
              "      <th>57</th>\n",
              "      <th>58</th>\n",
              "      <th>59</th>\n",
              "      <th>60</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0200</td>\n",
              "      <td>0.0371</td>\n",
              "      <td>0.0428</td>\n",
              "      <td>0.0207</td>\n",
              "      <td>0.0954</td>\n",
              "      <td>0.0986</td>\n",
              "      <td>0.1539</td>\n",
              "      <td>0.1601</td>\n",
              "      <td>0.3109</td>\n",
              "      <td>0.2111</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0027</td>\n",
              "      <td>0.0065</td>\n",
              "      <td>0.0159</td>\n",
              "      <td>0.0072</td>\n",
              "      <td>0.0167</td>\n",
              "      <td>0.0180</td>\n",
              "      <td>0.0084</td>\n",
              "      <td>0.0090</td>\n",
              "      <td>0.0032</td>\n",
              "      <td>R</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0453</td>\n",
              "      <td>0.0523</td>\n",
              "      <td>0.0843</td>\n",
              "      <td>0.0689</td>\n",
              "      <td>0.1183</td>\n",
              "      <td>0.2583</td>\n",
              "      <td>0.2156</td>\n",
              "      <td>0.3481</td>\n",
              "      <td>0.3337</td>\n",
              "      <td>0.2872</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0084</td>\n",
              "      <td>0.0089</td>\n",
              "      <td>0.0048</td>\n",
              "      <td>0.0094</td>\n",
              "      <td>0.0191</td>\n",
              "      <td>0.0140</td>\n",
              "      <td>0.0049</td>\n",
              "      <td>0.0052</td>\n",
              "      <td>0.0044</td>\n",
              "      <td>R</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0262</td>\n",
              "      <td>0.0582</td>\n",
              "      <td>0.1099</td>\n",
              "      <td>0.1083</td>\n",
              "      <td>0.0974</td>\n",
              "      <td>0.2280</td>\n",
              "      <td>0.2431</td>\n",
              "      <td>0.3771</td>\n",
              "      <td>0.5598</td>\n",
              "      <td>0.6194</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0232</td>\n",
              "      <td>0.0166</td>\n",
              "      <td>0.0095</td>\n",
              "      <td>0.0180</td>\n",
              "      <td>0.0244</td>\n",
              "      <td>0.0316</td>\n",
              "      <td>0.0164</td>\n",
              "      <td>0.0095</td>\n",
              "      <td>0.0078</td>\n",
              "      <td>R</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0100</td>\n",
              "      <td>0.0171</td>\n",
              "      <td>0.0623</td>\n",
              "      <td>0.0205</td>\n",
              "      <td>0.0205</td>\n",
              "      <td>0.0368</td>\n",
              "      <td>0.1098</td>\n",
              "      <td>0.1276</td>\n",
              "      <td>0.0598</td>\n",
              "      <td>0.1264</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0121</td>\n",
              "      <td>0.0036</td>\n",
              "      <td>0.0150</td>\n",
              "      <td>0.0085</td>\n",
              "      <td>0.0073</td>\n",
              "      <td>0.0050</td>\n",
              "      <td>0.0044</td>\n",
              "      <td>0.0040</td>\n",
              "      <td>0.0117</td>\n",
              "      <td>R</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0762</td>\n",
              "      <td>0.0666</td>\n",
              "      <td>0.0481</td>\n",
              "      <td>0.0394</td>\n",
              "      <td>0.0590</td>\n",
              "      <td>0.0649</td>\n",
              "      <td>0.1209</td>\n",
              "      <td>0.2467</td>\n",
              "      <td>0.3564</td>\n",
              "      <td>0.4459</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0031</td>\n",
              "      <td>0.0054</td>\n",
              "      <td>0.0105</td>\n",
              "      <td>0.0110</td>\n",
              "      <td>0.0015</td>\n",
              "      <td>0.0072</td>\n",
              "      <td>0.0048</td>\n",
              "      <td>0.0107</td>\n",
              "      <td>0.0094</td>\n",
              "      <td>R</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows Ã— 61 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       0       1       2       3       4       5       6       7       8   \\\n",
              "0  0.0200  0.0371  0.0428  0.0207  0.0954  0.0986  0.1539  0.1601  0.3109   \n",
              "1  0.0453  0.0523  0.0843  0.0689  0.1183  0.2583  0.2156  0.3481  0.3337   \n",
              "2  0.0262  0.0582  0.1099  0.1083  0.0974  0.2280  0.2431  0.3771  0.5598   \n",
              "3  0.0100  0.0171  0.0623  0.0205  0.0205  0.0368  0.1098  0.1276  0.0598   \n",
              "4  0.0762  0.0666  0.0481  0.0394  0.0590  0.0649  0.1209  0.2467  0.3564   \n",
              "\n",
              "       9   ...      51      52      53      54      55      56      57  \\\n",
              "0  0.2111  ...  0.0027  0.0065  0.0159  0.0072  0.0167  0.0180  0.0084   \n",
              "1  0.2872  ...  0.0084  0.0089  0.0048  0.0094  0.0191  0.0140  0.0049   \n",
              "2  0.6194  ...  0.0232  0.0166  0.0095  0.0180  0.0244  0.0316  0.0164   \n",
              "3  0.1264  ...  0.0121  0.0036  0.0150  0.0085  0.0073  0.0050  0.0044   \n",
              "4  0.4459  ...  0.0031  0.0054  0.0105  0.0110  0.0015  0.0072  0.0048   \n",
              "\n",
              "       58      59  60  \n",
              "0  0.0090  0.0032   R  \n",
              "1  0.0052  0.0044   R  \n",
              "2  0.0095  0.0078   R  \n",
              "3  0.0040  0.0117   R  \n",
              "4  0.0107  0.0094   R  \n",
              "\n",
              "[5 rows x 61 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O4_7DvnWK5CO",
        "colab_type": "code",
        "outputId": "25e50429-6083-4757-c776-1de0de9b5199",
        "colab": {}
      },
      "source": [
        "dataset.describe()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>50</th>\n",
              "      <th>51</th>\n",
              "      <th>52</th>\n",
              "      <th>53</th>\n",
              "      <th>54</th>\n",
              "      <th>55</th>\n",
              "      <th>56</th>\n",
              "      <th>57</th>\n",
              "      <th>58</th>\n",
              "      <th>59</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "      <td>208.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.029164</td>\n",
              "      <td>0.038437</td>\n",
              "      <td>0.043832</td>\n",
              "      <td>0.053892</td>\n",
              "      <td>0.075202</td>\n",
              "      <td>0.104570</td>\n",
              "      <td>0.121747</td>\n",
              "      <td>0.134799</td>\n",
              "      <td>0.178003</td>\n",
              "      <td>0.208259</td>\n",
              "      <td>...</td>\n",
              "      <td>0.016069</td>\n",
              "      <td>0.013420</td>\n",
              "      <td>0.010709</td>\n",
              "      <td>0.010941</td>\n",
              "      <td>0.009290</td>\n",
              "      <td>0.008222</td>\n",
              "      <td>0.007820</td>\n",
              "      <td>0.007949</td>\n",
              "      <td>0.007941</td>\n",
              "      <td>0.006507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.022991</td>\n",
              "      <td>0.032960</td>\n",
              "      <td>0.038428</td>\n",
              "      <td>0.046528</td>\n",
              "      <td>0.055552</td>\n",
              "      <td>0.059105</td>\n",
              "      <td>0.061788</td>\n",
              "      <td>0.085152</td>\n",
              "      <td>0.118387</td>\n",
              "      <td>0.134416</td>\n",
              "      <td>...</td>\n",
              "      <td>0.012008</td>\n",
              "      <td>0.009634</td>\n",
              "      <td>0.007060</td>\n",
              "      <td>0.007301</td>\n",
              "      <td>0.007088</td>\n",
              "      <td>0.005736</td>\n",
              "      <td>0.005785</td>\n",
              "      <td>0.006470</td>\n",
              "      <td>0.006181</td>\n",
              "      <td>0.005031</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.001500</td>\n",
              "      <td>0.000600</td>\n",
              "      <td>0.001500</td>\n",
              "      <td>0.005800</td>\n",
              "      <td>0.006700</td>\n",
              "      <td>0.010200</td>\n",
              "      <td>0.003300</td>\n",
              "      <td>0.005500</td>\n",
              "      <td>0.007500</td>\n",
              "      <td>0.011300</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000800</td>\n",
              "      <td>0.000500</td>\n",
              "      <td>0.001000</td>\n",
              "      <td>0.000600</td>\n",
              "      <td>0.000400</td>\n",
              "      <td>0.000300</td>\n",
              "      <td>0.000300</td>\n",
              "      <td>0.000100</td>\n",
              "      <td>0.000600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.013350</td>\n",
              "      <td>0.016450</td>\n",
              "      <td>0.018950</td>\n",
              "      <td>0.024375</td>\n",
              "      <td>0.038050</td>\n",
              "      <td>0.067025</td>\n",
              "      <td>0.080900</td>\n",
              "      <td>0.080425</td>\n",
              "      <td>0.097025</td>\n",
              "      <td>0.111275</td>\n",
              "      <td>...</td>\n",
              "      <td>0.008425</td>\n",
              "      <td>0.007275</td>\n",
              "      <td>0.005075</td>\n",
              "      <td>0.005375</td>\n",
              "      <td>0.004150</td>\n",
              "      <td>0.004400</td>\n",
              "      <td>0.003700</td>\n",
              "      <td>0.003600</td>\n",
              "      <td>0.003675</td>\n",
              "      <td>0.003100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.022800</td>\n",
              "      <td>0.030800</td>\n",
              "      <td>0.034300</td>\n",
              "      <td>0.044050</td>\n",
              "      <td>0.062500</td>\n",
              "      <td>0.092150</td>\n",
              "      <td>0.106950</td>\n",
              "      <td>0.112100</td>\n",
              "      <td>0.152250</td>\n",
              "      <td>0.182400</td>\n",
              "      <td>...</td>\n",
              "      <td>0.013900</td>\n",
              "      <td>0.011400</td>\n",
              "      <td>0.009550</td>\n",
              "      <td>0.009300</td>\n",
              "      <td>0.007500</td>\n",
              "      <td>0.006850</td>\n",
              "      <td>0.005950</td>\n",
              "      <td>0.005800</td>\n",
              "      <td>0.006400</td>\n",
              "      <td>0.005300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.035550</td>\n",
              "      <td>0.047950</td>\n",
              "      <td>0.057950</td>\n",
              "      <td>0.064500</td>\n",
              "      <td>0.100275</td>\n",
              "      <td>0.134125</td>\n",
              "      <td>0.154000</td>\n",
              "      <td>0.169600</td>\n",
              "      <td>0.233425</td>\n",
              "      <td>0.268700</td>\n",
              "      <td>...</td>\n",
              "      <td>0.020825</td>\n",
              "      <td>0.016725</td>\n",
              "      <td>0.014900</td>\n",
              "      <td>0.014500</td>\n",
              "      <td>0.012100</td>\n",
              "      <td>0.010575</td>\n",
              "      <td>0.010425</td>\n",
              "      <td>0.010350</td>\n",
              "      <td>0.010325</td>\n",
              "      <td>0.008525</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.137100</td>\n",
              "      <td>0.233900</td>\n",
              "      <td>0.305900</td>\n",
              "      <td>0.426400</td>\n",
              "      <td>0.401000</td>\n",
              "      <td>0.382300</td>\n",
              "      <td>0.372900</td>\n",
              "      <td>0.459000</td>\n",
              "      <td>0.682800</td>\n",
              "      <td>0.710600</td>\n",
              "      <td>...</td>\n",
              "      <td>0.100400</td>\n",
              "      <td>0.070900</td>\n",
              "      <td>0.039000</td>\n",
              "      <td>0.035200</td>\n",
              "      <td>0.044700</td>\n",
              "      <td>0.039400</td>\n",
              "      <td>0.035500</td>\n",
              "      <td>0.044000</td>\n",
              "      <td>0.036400</td>\n",
              "      <td>0.043900</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows Ã— 60 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "               0           1           2           3           4           5   \\\n",
              "count  208.000000  208.000000  208.000000  208.000000  208.000000  208.000000   \n",
              "mean     0.029164    0.038437    0.043832    0.053892    0.075202    0.104570   \n",
              "std      0.022991    0.032960    0.038428    0.046528    0.055552    0.059105   \n",
              "min      0.001500    0.000600    0.001500    0.005800    0.006700    0.010200   \n",
              "25%      0.013350    0.016450    0.018950    0.024375    0.038050    0.067025   \n",
              "50%      0.022800    0.030800    0.034300    0.044050    0.062500    0.092150   \n",
              "75%      0.035550    0.047950    0.057950    0.064500    0.100275    0.134125   \n",
              "max      0.137100    0.233900    0.305900    0.426400    0.401000    0.382300   \n",
              "\n",
              "               6           7           8           9   ...          50  \\\n",
              "count  208.000000  208.000000  208.000000  208.000000  ...  208.000000   \n",
              "mean     0.121747    0.134799    0.178003    0.208259  ...    0.016069   \n",
              "std      0.061788    0.085152    0.118387    0.134416  ...    0.012008   \n",
              "min      0.003300    0.005500    0.007500    0.011300  ...    0.000000   \n",
              "25%      0.080900    0.080425    0.097025    0.111275  ...    0.008425   \n",
              "50%      0.106950    0.112100    0.152250    0.182400  ...    0.013900   \n",
              "75%      0.154000    0.169600    0.233425    0.268700  ...    0.020825   \n",
              "max      0.372900    0.459000    0.682800    0.710600  ...    0.100400   \n",
              "\n",
              "               51          52          53          54          55          56  \\\n",
              "count  208.000000  208.000000  208.000000  208.000000  208.000000  208.000000   \n",
              "mean     0.013420    0.010709    0.010941    0.009290    0.008222    0.007820   \n",
              "std      0.009634    0.007060    0.007301    0.007088    0.005736    0.005785   \n",
              "min      0.000800    0.000500    0.001000    0.000600    0.000400    0.000300   \n",
              "25%      0.007275    0.005075    0.005375    0.004150    0.004400    0.003700   \n",
              "50%      0.011400    0.009550    0.009300    0.007500    0.006850    0.005950   \n",
              "75%      0.016725    0.014900    0.014500    0.012100    0.010575    0.010425   \n",
              "max      0.070900    0.039000    0.035200    0.044700    0.039400    0.035500   \n",
              "\n",
              "               57          58          59  \n",
              "count  208.000000  208.000000  208.000000  \n",
              "mean     0.007949    0.007941    0.006507  \n",
              "std      0.006470    0.006181    0.005031  \n",
              "min      0.000300    0.000100    0.000600  \n",
              "25%      0.003600    0.003675    0.003100  \n",
              "50%      0.005800    0.006400    0.005300  \n",
              "75%      0.010350    0.010325    0.008525  \n",
              "max      0.044000    0.036400    0.043900  \n",
              "\n",
              "[8 rows x 60 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sunQPtj8K5CU",
        "colab_type": "code",
        "outputId": "97fd8e64-8495-4397-c395-c7fa9c39d95d",
        "colab": {}
      },
      "source": [
        "y"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
              "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
              "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
              "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
              "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
              "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
              "       'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R', 'R',\n",
              "       'R', 'R', 'R', 'R', 'R', 'R', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M',\n",
              "       'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M', 'M'],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AXx0a-yGK5Cb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Feature Encoding\n",
        "from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n",
        "encoder = LabelEncoder()\n",
        "y = encoder.fit_transform(y)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZBEpfhdrK5Cf",
        "colab_type": "code",
        "outputId": "d9698562-067b-4ef7-c1c1-5cc7547684d5",
        "colab": {}
      },
      "source": [
        "y"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n",
              "       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pOlsap3JK5Ci",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Splitting into training and test sets\n",
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "au_wPSvOK5Ck",
        "colab_type": "code",
        "outputId": "94b4cba6-7090-4c1d-e0dc-b11551a16957",
        "colab": {}
      },
      "source": [
        "len(X_train)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "156"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iKZZF4ENK5Cm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Feature Scaling\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "sc = StandardScaler()\n",
        "X_train = sc.fit_transform(X_train)\n",
        "X_test = sc.transform(X_test)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ETGRgJkBK5Cq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Building an ANN\n",
        "# Importing Keras Libraries and packages\n",
        "import keras \n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.layers import Dropout\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l1MzeQFEK5Cs",
        "colab_type": "code",
        "outputId": "29006337-6048-4996-f436-19b8db3361dc",
        "colab": {}
      },
      "source": [
        "# Initialize the ANN\n",
        "classifier = Sequential()\n",
        "\n",
        "# Build the input and hidden layers with dropout\n",
        "classifier.add(Dense(units = 32, activation = 'relu', kernel_initializer = 'uniform', input_dim = 60))\n",
        "classifier.add(Dropout(rate = 0.1))\n",
        "\n",
        "# Adding the second hidden layer\n",
        "classifier.add(Dense(units = 32, activation = 'relu', kernel_initializer = 'uniform'))\n",
        "classifier.add(Dropout(rate = 0.1))\n",
        "\n",
        "# Adding an output layer\n",
        "classifier.add(Dense(units = 1, kernel_initializer = 'uniform', activation = 'sigmoid'))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /home/ml/anaconda3/envs/py36/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Colocations handled automatically by placer.\n",
            "WARNING:tensorflow:From /home/ml/anaconda3/envs/py36/lib/python3.7/site-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4PWOPfHmK5Cv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n",
        "# Compiling the ANN\n",
        "classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fbWm6xpfK5Cx",
        "colab_type": "code",
        "outputId": "1cd43940-7756-4597-8d34-57f27b039e39",
        "colab": {}
      },
      "source": [
        "\n",
        "# Fitting ANN to training set\n",
        "classifier.fit(X_train, y_train, batch_size = 10, epochs = 100)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "WARNING:tensorflow:From /home/ml/anaconda3/envs/py36/lib/python3.7/site-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
            "Instructions for updating:\n",
            "Use tf.cast instead.\n",
            "Epoch 1/100\n",
            "156/156 [==============================] - 3s 21ms/step - loss: 0.6917 - acc: 0.5577\n",
            "Epoch 2/100\n",
            "156/156 [==============================] - 0s 616us/step - loss: 0.6830 - acc: 0.7436\n",
            "Epoch 3/100\n",
            "156/156 [==============================] - 0s 591us/step - loss: 0.6515 - acc: 0.8141\n",
            "Epoch 4/100\n",
            "156/156 [==============================] - 0s 571us/step - loss: 0.5802 - acc: 0.8397\n",
            "Epoch 5/100\n",
            "156/156 [==============================] - 0s 626us/step - loss: 0.4838 - acc: 0.8462\n",
            "Epoch 6/100\n",
            "156/156 [==============================] - 0s 609us/step - loss: 0.3821 - acc: 0.8526\n",
            "Epoch 7/100\n",
            "156/156 [==============================] - 0s 510us/step - loss: 0.3005 - acc: 0.8846\n",
            "Epoch 8/100\n",
            "156/156 [==============================] - 0s 505us/step - loss: 0.2590 - acc: 0.8910\n",
            "Epoch 9/100\n",
            "156/156 [==============================] - 0s 578us/step - loss: 0.2160 - acc: 0.9167\n",
            "Epoch 10/100\n",
            "156/156 [==============================] - 0s 623us/step - loss: 0.1872 - acc: 0.9359\n",
            "Epoch 11/100\n",
            "156/156 [==============================] - 0s 515us/step - loss: 0.1517 - acc: 0.9615\n",
            "Epoch 12/100\n",
            "156/156 [==============================] - 0s 552us/step - loss: 0.1227 - acc: 0.9679\n",
            "Epoch 13/100\n",
            "156/156 [==============================] - 0s 614us/step - loss: 0.1101 - acc: 0.9744\n",
            "Epoch 14/100\n",
            "156/156 [==============================] - 0s 578us/step - loss: 0.0771 - acc: 0.9872\n",
            "Epoch 15/100\n",
            "156/156 [==============================] - 0s 560us/step - loss: 0.0728 - acc: 0.9872\n",
            "Epoch 16/100\n",
            "156/156 [==============================] - 0s 590us/step - loss: 0.0665 - acc: 0.9872\n",
            "Epoch 17/100\n",
            "156/156 [==============================] - 0s 603us/step - loss: 0.0566 - acc: 0.9936\n",
            "Epoch 18/100\n",
            "156/156 [==============================] - 0s 563us/step - loss: 0.0421 - acc: 0.9936\n",
            "Epoch 19/100\n",
            "156/156 [==============================] - 0s 580us/step - loss: 0.0497 - acc: 0.9808\n",
            "Epoch 20/100\n",
            "156/156 [==============================] - 0s 578us/step - loss: 0.0432 - acc: 0.9936\n",
            "Epoch 21/100\n",
            "156/156 [==============================] - 0s 662us/step - loss: 0.0237 - acc: 1.0000\n",
            "Epoch 22/100\n",
            "156/156 [==============================] - 0s 571us/step - loss: 0.0244 - acc: 0.9936\n",
            "Epoch 23/100\n",
            "156/156 [==============================] - 0s 585us/step - loss: 0.0211 - acc: 1.0000\n",
            "Epoch 24/100\n",
            "156/156 [==============================] - 0s 612us/step - loss: 0.0234 - acc: 0.9936\n",
            "Epoch 25/100\n",
            "156/156 [==============================] - 0s 527us/step - loss: 0.0194 - acc: 1.0000\n",
            "Epoch 26/100\n",
            "156/156 [==============================] - 0s 530us/step - loss: 0.0159 - acc: 1.0000\n",
            "Epoch 27/100\n",
            "156/156 [==============================] - 0s 590us/step - loss: 0.0185 - acc: 0.9936\n",
            "Epoch 28/100\n",
            "156/156 [==============================] - 0s 517us/step - loss: 0.0186 - acc: 1.0000\n",
            "Epoch 29/100\n",
            "156/156 [==============================] - 0s 536us/step - loss: 0.0154 - acc: 1.0000\n",
            "Epoch 30/100\n",
            "156/156 [==============================] - 0s 549us/step - loss: 0.0174 - acc: 0.9936\n",
            "Epoch 31/100\n",
            "156/156 [==============================] - 0s 612us/step - loss: 0.0081 - acc: 1.0000\n",
            "Epoch 32/100\n",
            "156/156 [==============================] - 0s 615us/step - loss: 0.0195 - acc: 0.9936\n",
            "Epoch 33/100\n",
            "156/156 [==============================] - 0s 593us/step - loss: 0.0105 - acc: 1.0000\n",
            "Epoch 34/100\n",
            "156/156 [==============================] - 0s 442us/step - loss: 0.0149 - acc: 1.0000\n",
            "Epoch 35/100\n",
            "156/156 [==============================] - 0s 558us/step - loss: 0.0066 - acc: 1.0000\n",
            "Epoch 36/100\n",
            "156/156 [==============================] - 0s 497us/step - loss: 0.0080 - acc: 1.0000\n",
            "Epoch 37/100\n",
            "156/156 [==============================] - 0s 577us/step - loss: 0.0098 - acc: 1.0000\n",
            "Epoch 38/100\n",
            "156/156 [==============================] - 0s 603us/step - loss: 0.0096 - acc: 1.0000\n",
            "Epoch 39/100\n",
            "156/156 [==============================] - 0s 513us/step - loss: 0.0066 - acc: 1.0000\n",
            "Epoch 40/100\n",
            "156/156 [==============================] - 0s 531us/step - loss: 0.0071 - acc: 1.0000\n",
            "Epoch 41/100\n",
            "156/156 [==============================] - 0s 557us/step - loss: 0.0127 - acc: 0.9936\n",
            "Epoch 42/100\n",
            "156/156 [==============================] - 0s 597us/step - loss: 0.0074 - acc: 1.0000\n",
            "Epoch 43/100\n",
            "156/156 [==============================] - 0s 545us/step - loss: 0.0049 - acc: 1.0000\n",
            "Epoch 44/100\n",
            "156/156 [==============================] - 0s 597us/step - loss: 0.0029 - acc: 1.0000\n",
            "Epoch 45/100\n",
            "156/156 [==============================] - 0s 580us/step - loss: 0.0051 - acc: 1.0000\n",
            "Epoch 46/100\n",
            "156/156 [==============================] - 0s 581us/step - loss: 0.0041 - acc: 1.0000\n",
            "Epoch 47/100\n",
            "156/156 [==============================] - 0s 607us/step - loss: 0.0095 - acc: 1.0000\n",
            "Epoch 48/100\n",
            "156/156 [==============================] - 0s 516us/step - loss: 0.0045 - acc: 1.0000\n",
            "Epoch 49/100\n",
            "156/156 [==============================] - 0s 565us/step - loss: 0.0024 - acc: 1.0000\n",
            "Epoch 50/100\n",
            "156/156 [==============================] - 0s 578us/step - loss: 0.0062 - acc: 1.0000\n",
            "Epoch 51/100\n",
            "156/156 [==============================] - 0s 471us/step - loss: 0.0036 - acc: 1.0000\n",
            "Epoch 52/100\n",
            "156/156 [==============================] - 0s 549us/step - loss: 0.0015 - acc: 1.0000\n",
            "Epoch 53/100\n",
            "156/156 [==============================] - 0s 465us/step - loss: 0.0028 - acc: 1.0000\n",
            "Epoch 54/100\n",
            "156/156 [==============================] - 0s 541us/step - loss: 0.0033 - acc: 1.0000\n",
            "Epoch 55/100\n",
            "156/156 [==============================] - 0s 538us/step - loss: 0.0022 - acc: 1.0000\n",
            "Epoch 56/100\n",
            "156/156 [==============================] - 0s 558us/step - loss: 0.0019 - acc: 1.0000\n",
            "Epoch 57/100\n",
            "156/156 [==============================] - 0s 555us/step - loss: 0.0028 - acc: 1.0000\n",
            "Epoch 58/100\n",
            "156/156 [==============================] - 0s 483us/step - loss: 0.0032 - acc: 1.0000\n",
            "Epoch 59/100\n",
            "156/156 [==============================] - 0s 560us/step - loss: 0.0017 - acc: 1.0000\n",
            "Epoch 60/100\n",
            "156/156 [==============================] - 0s 582us/step - loss: 0.0021 - acc: 1.0000\n",
            "Epoch 61/100\n",
            "156/156 [==============================] - 0s 499us/step - loss: 0.0036 - acc: 1.0000\n",
            "Epoch 62/100\n",
            "156/156 [==============================] - 0s 557us/step - loss: 0.0021 - acc: 1.0000\n",
            "Epoch 63/100\n",
            "156/156 [==============================] - 0s 507us/step - loss: 0.0025 - acc: 1.0000\n",
            "Epoch 64/100\n",
            "156/156 [==============================] - 0s 542us/step - loss: 0.0024 - acc: 1.0000\n",
            "Epoch 65/100\n",
            "156/156 [==============================] - 0s 573us/step - loss: 0.0015 - acc: 1.0000\n",
            "Epoch 66/100\n",
            "156/156 [==============================] - 0s 561us/step - loss: 0.0026 - acc: 1.0000\n",
            "Epoch 67/100\n",
            "156/156 [==============================] - 0s 546us/step - loss: 0.0023 - acc: 1.0000\n",
            "Epoch 68/100\n",
            "156/156 [==============================] - 0s 535us/step - loss: 0.0016 - acc: 1.0000\n",
            "Epoch 69/100\n",
            "156/156 [==============================] - 0s 561us/step - loss: 0.0044 - acc: 1.0000\n",
            "Epoch 70/100\n",
            "156/156 [==============================] - 0s 549us/step - loss: 0.0012 - acc: 1.0000\n",
            "Epoch 71/100\n",
            "156/156 [==============================] - 0s 508us/step - loss: 0.0030 - acc: 1.0000\n",
            "Epoch 72/100\n",
            "156/156 [==============================] - 0s 607us/step - loss: 0.0026 - acc: 1.0000\n",
            "Epoch 73/100\n",
            "156/156 [==============================] - 0s 545us/step - loss: 0.0017 - acc: 1.0000\n",
            "Epoch 74/100\n",
            "156/156 [==============================] - 0s 606us/step - loss: 0.0010 - acc: 1.0000\n",
            "Epoch 75/100\n",
            "156/156 [==============================] - 0s 578us/step - loss: 0.0033 - acc: 1.0000\n",
            "Epoch 76/100\n",
            "156/156 [==============================] - 0s 549us/step - loss: 0.0033 - acc: 1.0000\n",
            "Epoch 77/100\n",
            "156/156 [==============================] - 0s 512us/step - loss: 0.0052 - acc: 1.0000\n",
            "Epoch 78/100\n",
            "156/156 [==============================] - 0s 573us/step - loss: 0.0019 - acc: 1.0000\n",
            "Epoch 79/100\n",
            "156/156 [==============================] - 0s 515us/step - loss: 0.0025 - acc: 1.0000\n",
            "Epoch 80/100\n",
            "156/156 [==============================] - 0s 549us/step - loss: 8.2194e-04 - acc: 1.0000\n",
            "Epoch 81/100\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "156/156 [==============================] - 0s 556us/step - loss: 0.0020 - acc: 1.0000\n",
            "Epoch 82/100\n",
            "156/156 [==============================] - 0s 515us/step - loss: 0.0014 - acc: 1.0000\n",
            "Epoch 83/100\n",
            "156/156 [==============================] - 0s 559us/step - loss: 0.0043 - acc: 1.0000\n",
            "Epoch 84/100\n",
            "156/156 [==============================] - 0s 536us/step - loss: 0.0139 - acc: 0.9936\n",
            "Epoch 85/100\n",
            "156/156 [==============================] - 0s 553us/step - loss: 0.0031 - acc: 1.0000\n",
            "Epoch 86/100\n",
            "156/156 [==============================] - 0s 510us/step - loss: 0.0017 - acc: 1.0000\n",
            "Epoch 87/100\n",
            "156/156 [==============================] - 0s 572us/step - loss: 7.3270e-04 - acc: 1.0000\n",
            "Epoch 88/100\n",
            "156/156 [==============================] - 0s 573us/step - loss: 0.0013 - acc: 1.0000\n",
            "Epoch 89/100\n",
            "156/156 [==============================] - 0s 556us/step - loss: 0.0010 - acc: 1.0000\n",
            "Epoch 90/100\n",
            "156/156 [==============================] - 0s 552us/step - loss: 0.0121 - acc: 0.9936\n",
            "Epoch 91/100\n",
            "156/156 [==============================] - 0s 496us/step - loss: 0.0020 - acc: 1.0000\n",
            "Epoch 92/100\n",
            "156/156 [==============================] - 0s 527us/step - loss: 0.0024 - acc: 1.0000\n",
            "Epoch 93/100\n",
            "156/156 [==============================] - 0s 531us/step - loss: 0.0015 - acc: 1.0000\n",
            "Epoch 94/100\n",
            "156/156 [==============================] - 0s 571us/step - loss: 0.0052 - acc: 0.9936\n",
            "Epoch 95/100\n",
            "156/156 [==============================] - 0s 486us/step - loss: 0.0129 - acc: 0.9936\n",
            "Epoch 96/100\n",
            "156/156 [==============================] - 0s 494us/step - loss: 0.0034 - acc: 1.0000\n",
            "Epoch 97/100\n",
            "156/156 [==============================] - 0s 530us/step - loss: 0.0062 - acc: 1.0000\n",
            "Epoch 98/100\n",
            "156/156 [==============================] - 0s 580us/step - loss: 0.0109 - acc: 0.9936\n",
            "Epoch 99/100\n",
            "156/156 [==============================] - 0s 480us/step - loss: 9.7372e-04 - acc: 1.0000\n",
            "Epoch 100/100\n",
            "156/156 [==============================] - 0s 504us/step - loss: 0.0043 - acc: 1.0000\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f29c05ba978>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-KyIG5lOK5C0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Predicting on test set\n",
        "y_pred = classifier.predict(X_test) > 0.5"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ygYDUf-_K5C5",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Evaluating using confusion matrix\n",
        "from sklearn.metrics import confusion_matrix\n",
        "cm = confusion_matrix(y_test, y_pred)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QtpgNu-HK5C8",
        "colab_type": "code",
        "outputId": "ee0a3834-8b08-402d-afe3-23d31aeadb86",
        "colab": {}
      },
      "source": [
        "cm\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[25,  1],\n",
              "       [ 6, 20]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BjQrP3TGK5C-",
        "colab_type": "code",
        "outputId": "320078d5-b171-4655-dda8-5785757a1f65",
        "colab": {}
      },
      "source": [
        "25+20"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "45"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U-nyVq79K5DA",
        "colab_type": "code",
        "outputId": "0426fe0c-2383-436c-8b05-29cade1f1ad7",
        "colab": {}
      },
      "source": [
        "45/52"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8653846153846154"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VWtd2cRMK5DC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d1sDNWZMK5DE",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}